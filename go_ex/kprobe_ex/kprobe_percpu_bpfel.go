// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadKprobe_percpu returns the embedded CollectionSpec for kprobe_percpu.
func loadKprobe_percpu() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Kprobe_percpuBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load kprobe_percpu: %w", err)
	}

	return spec, err
}

// loadKprobe_percpuObjects loads kprobe_percpu and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*kprobe_percpuObjects
//	*kprobe_percpuPrograms
//	*kprobe_percpuMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadKprobe_percpuObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadKprobe_percpu()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// kprobe_percpuSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kprobe_percpuSpecs struct {
	kprobe_percpuProgramSpecs
	kprobe_percpuMapSpecs
}

// kprobe_percpuSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kprobe_percpuProgramSpecs struct {
	KprobeExecve *ebpf.ProgramSpec `ebpf:"kprobe_execve"`
}

// kprobe_percpuMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kprobe_percpuMapSpecs struct {
	KprobeMap *ebpf.MapSpec `ebpf:"kprobe_map"`
}

// kprobe_percpuObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadKprobe_percpuObjects or ebpf.CollectionSpec.LoadAndAssign.
type kprobe_percpuObjects struct {
	kprobe_percpuPrograms
	kprobe_percpuMaps
}

func (o *kprobe_percpuObjects) Close() error {
	return _Kprobe_percpuClose(
		&o.kprobe_percpuPrograms,
		&o.kprobe_percpuMaps,
	)
}

// kprobe_percpuMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadKprobe_percpuObjects or ebpf.CollectionSpec.LoadAndAssign.
type kprobe_percpuMaps struct {
	KprobeMap *ebpf.Map `ebpf:"kprobe_map"`
}

func (m *kprobe_percpuMaps) Close() error {
	return _Kprobe_percpuClose(
		m.KprobeMap,
	)
}

// kprobe_percpuPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadKprobe_percpuObjects or ebpf.CollectionSpec.LoadAndAssign.
type kprobe_percpuPrograms struct {
	KprobeExecve *ebpf.Program `ebpf:"kprobe_execve"`
}

func (p *kprobe_percpuPrograms) Close() error {
	return _Kprobe_percpuClose(
		p.KprobeExecve,
	)
}

func _Kprobe_percpuClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed kprobe_percpu_bpfel.o
var _Kprobe_percpuBytes []byte
